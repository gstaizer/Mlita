/*
14.13.Скобки 2 (6)
Последовательность()(()) является правильной скобочной последовательностью, потому что она может, например, 
встречаться в выражении(2 + 2) :(3 - (5 - 2) + 4), а последовательности(() и())(не являются таковыми.
Нужно подсчитать количество различных способов добавления двух скобок в заданную правильную скобочную 
последовательность так, чтобы снова получилась правильная скобочная последовательность.Способы получения 
последовательности различаются по позициям добавленных скобок в полученной последовательности.
Например, даже при добавлении скобок в простейшую последовательность() можно получить другую правильную 
скобочную последовательность семью способами : ()(), (()), (()), (()), (()), ()(), ()().Таким образом, 
если в полученной последовательности добавленная открывающая скобка стоит в позиции i, а добавленная 
закрывающая - в позиции j, то два способа, соответствующие парам(i1, j1) и(i2, j2), считаются различными, 
если i1 ≠ i2 или j1 ≠ j2.Требуется написать программу, которая по заданной правильной скобочной последовательности 
определяет количество различных описанных выше способов добавления двух скобок.
    
    Ввод.Входной файл состоит из одной непустой строки, содержащей ровно 2N символов : N  открывающих и N 
    закрывающих круглых скобок(1 ≤ N ≤ 10^5).Гарантируется, что эта строка является правильной скобочной последовательностью.
    Вывод.В единственной строке выведите количество различных способов добавления в заданную 
    последовательность двух скобок таким образом, чтобы получилась другая правильная скобочная последовательность.
    Примеры
    Ввод 1    Ввод 2    Ввод 3
    ()        ()()      (())
    Вывод 1   Вывод 2   Вывод 3
    7         17        21

    Стариков Сергей ПС-32 (22)   Visual studio 2019
*/

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

const char bracket = '(';

void CalculatePermutations(ifstream& input, ofstream& output)
{
    vector<long long> vector, ZeroParts;
    long long result = 0, beforeBracket = 0;
    long long j = 0, m = 0, length = 0, untilNextPart = 0;
    string str = "";

    getline(input, str);
    length = str.length();

    for (long long i = 0; i < length; i++)
    {
        str[i] == bracket ? j++ : j--;

        if (j == 0) 
        {
            if (i != length - 1)
            {
                m++;
                vector.push_back(i + 1);
            }
            if (vector.size() > 1)
            {
                ZeroParts.push_back(untilNextPart);
            }
            untilNextPart = 0;
        }
        untilNextPart++;
    }

    for (long long i = 0; i < m; i++) 
    {
        m == 1 ? beforeBracket += vector[i] * (length - vector[i]) : beforeBracket += vector[i] * ZeroParts[i];
    }

    result = (length + 1) * length + 1 - beforeBracket;
    output << result;
}

int main()
{
    ifstream input("INPUT.txt");
    ofstream output("OUTPUT.txt");

    CalculatePermutations(input, output);
    return 0;
}